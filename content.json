{"meta":{"title":"SubmitHealth","subtitle":"Blog","description":null,"author":"SubmitHealth","url":"http://blog.submithealth.com"},"pages":[{"title":"","date":"2016-12-15T07:00:56.645Z","updated":"2016-12-15T07:00:56.645Z","comments":true,"path":"assets/Why-Are-Some-Healthcare-Providers-Charging-So-Much-More-Than-Others/src/tooltip.js","permalink":"http://blog.submithealth.com/assets/Why-Are-Some-Healthcare-Providers-Charging-So-Much-More-Than-Others/src/tooltip.js","excerpt":"","text":"/* * Creates tooltip with provided id that * floats on top of visualization. * Most styling is expected to come from CSS * so check out bubble_chart.css for more details. */ function floatingTooltip(tooltipId, width) { // Local variable to hold tooltip div for // manipulation in other functions. var tt = d3.select('body') .append('div') .attr('class', 'tooltip') .attr('id', tooltipId) .style('pointer-events', 'none'); // Set a width if it is provided. if (width) { tt.style('width', width); } // Initially it is hidden. hideTooltip(); /* * Display tooltip with provided content. * * content is expected to be HTML string. * * event is d3.event for positioning. */ function showTooltip(content, event) { tt.style('opacity', 1.0) .html(content); updatePosition(event); } /* * Hide the tooltip div. */ function hideTooltip() { tt.style('opacity', 0.0); } /* * Figure out where to place the tooltip * based on d3 mouse event. */ function updatePosition(event) { var xOffset = 20; var yOffset = 10; var ttw = tt.style('width'); var tth = tt.style('height'); var wscrY = window.scrollY; var wscrX = window.scrollX; var curX = (document.all) ? event.clientX + wscrX : event.pageX; var curY = (document.all) ? event.clientY + wscrY : event.pageY; var ttleft = ((curX - wscrX + xOffset * 2 + ttw) > window.innerWidth) ? curX - ttw - xOffset * 2 : curX + xOffset; if (ttleft < wscrX + xOffset) { ttleft = wscrX + xOffset; } var tttop = ((curY - wscrY + yOffset * 2 + tth) > window.innerHeight) ? curY - tth - yOffset * 2 : curY + yOffset; if (tttop < wscrY + yOffset) { tttop = curY + yOffset; } tt.style({ top: tttop + 'px', left: ttleft + 'px' }); } return { showTooltip: showTooltip, hideTooltip: hideTooltip, updatePosition: updatePosition }; }"},{"title":"","date":"2016-12-15T07:00:56.555Z","updated":"2016-12-15T07:00:56.555Z","comments":true,"path":"assets/Why-Are-Some-Healthcare-Providers-Charging-So-Much-More-Than-Others/src/bubble_chart.js","permalink":"http://blog.submithealth.com/assets/Why-Are-Some-Healthcare-Providers-Charging-So-Much-More-Than-Others/src/bubble_chart.js","excerpt":"","text":"/* bubbleChart creation function. Returns a function that will * instantiate a new bubble chart given a DOM element to display * it in and a dataset to visualize. * * Organization and style inspired by: * https://bost.ocks.org/mike/chart/ * */ function bubbleChart() { // Constants for sizing var width = 725; var height = 600; // tooltip for mouseover functionality var tooltip = floatingTooltip('sh_tooltip', 240); // Locations to move bubbles towards, depending // on which view mode is selected. var center = { x: width / 2, y: height / 2 }; var yearCenters = { WA: { x: width / 3, y: height / 3 }, // { x: width / 3, y: height / 2 }, CA: { x: width / 3, y: 2 * height / 3 }, // { x: width / 2, y: height / 2 }, NY: { x: 2 * width / 3, y: height / 3 }, // { x: 2 * width / 3, y: height / 2 }, FL: { x: 2 * width / 3, y: 2 * height / 3 } }; // X locations of the year titles. var yearsTitleX = { WA: 50, CA: 50, // width / 2, NY: width - 50, FL: width - 50 }; // Y locations of the year titles. var yearsTitleY = { WA: 40, CA: 450, NY: 40, FL: 450 }; // Used when setting up force and // moving around nodes var damper = 0.102; // These will be set in create_nodes and create_vis var svg = null; var bubbles = null; var nodes = []; // Charge function that is called for each node. // Charge is proportional to the diameter of the // circle (which is stored in the radius attribute // of the circle's associated data. // This is done to allow for accurate collision // detection with nodes of different sizes. // Charge is negative because we want nodes to repel. // Dividing by 8 scales down the charge to be // appropriate for the visualization dimensions. function charge(d) { return -Math.pow(d.radius, 2.0) / 8; } // Here we create a force layout and // configure it to use the charge function // from above. This also sets some contants // to specify how the force layout should behave. // More configuration is done below. var force = d3.layout.force() .size([width, height]) .charge(charge) .gravity(-0.01) .friction(0.9); // Nice looking colors - no reason to buck the trend var fillColor = d3.scale.ordinal() .domain(['low', 'medium', 'high']) .range(['#9FB8AD', '#C287E8', '#FF8360']); // Sizes bubbles based on their area instead of raw radius var radiusScale = d3.scale.pow() .exponent(0.5) .range([2, 35]); /* * This data manipulation function takes the raw data from * the CSV file and converts it into an array of node objects. * Each node will store data and visualization values to visualize * a bubble. * * rawData is expected to be an array of data objects, read in from * one of d3's loading functions like d3.csv. * * This function returns the new node array, with a node in that * array for each element in the rawData input. */ function createNodes(rawData) { // Use map() to convert raw data into node data. // Checkout http://learnjsdata.com/ for more on // working with data. var myNodes = rawData.map(function (d) { return { id: d.id, radius: radiusScale(+d.Average_Estimated_Submitted_Charges), value: d.Average_Estimated_Submitted_Charges, name: d.Provider_City, org: d.Outpatient_Services, group: d.Provider_City, year: d.Provider_State, x: Math.random() * 900, y: Math.random() * 800 }; }); // sort them to prevent occlusion of smaller nodes. myNodes.sort(function (a, b) { return b.value - a.value; }); return myNodes; } /* * Main entry point to the bubble chart. This function is returned * by the parent closure. It prepares the rawData for visualization * and adds an svg element to the provided selector and starts the * visualization creation process. * * selector is expected to be a DOM element or CSS selector that * points to the parent element of the bubble chart. Inside this * element, the code will add the SVG continer for the visualization. * * rawData is expected to be an array of data objects as provided by * a d3 loading function like d3.csv. */ var chart = function chart(selector, rawData) { // Use the max Average_Estimated_Submitted_Charges in the data as the max in the scale's domain // note we have to ensure the Average_Estimated_Submitted_Charges is a number by converting it // with `+`. var maxAmount = d3.max(rawData, function (d) { return +d.Average_Estimated_Submitted_Charges; }); radiusScale.domain([0, maxAmount]); nodes = createNodes(rawData); // Set the force's nodes to our newly created nodes array. force.nodes(nodes); // Create a SVG element inside the provided selector // with desired size. svg = d3.select(selector) .append('svg') .attr('width', width) .attr('height', height) .attr('viewBox', '0 0 725 600') .attr('preserveAspectRatio', 'xMidYMid meet'); // Bind nodes data to what will become DOM elements to represent them. bubbles = svg.selectAll('.bubble') .data(nodes, function (d) { return d.id; }); // Create new circle elements each with class `bubble`. // There will be one circle.bubble for each object in the nodes array. // Initially, their radius (r attribute) will be 0. bubbles.enter().append('circle') .classed('bubble', true) .attr('r', 0) .attr('fill', function (d) { return fillColor(d.group); }) .attr('stroke', function (d) { return d3.rgb(fillColor(d.group)).darker(); }) .attr('stroke-width', 1) .style('opacity','.7') .on('mouseover', showDetail) .on('mouseout', hideDetail); // Fancy transition to make bubbles appear, ending with the // correct radius bubbles.transition() .duration(2000) .attr('r', function (d) { return d.radius; }); // Set initial layout to single group. groupBubbles(); }; /* * Sets visualization in \"single group mode\". * The year labels are hidden and the force layout * tick function is set to move all nodes to the * center of the visualization. */ function groupBubbles() { hideYears(); force.on('tick', function (e) { bubbles.each(moveToCenter(e.alpha)) .attr('cx', function (d) { return d.x; }) .attr('cy', function (d) { return d.y; }); }); force.start(); } /* * Helper function for \"single group mode\". * Returns a function that takes the data for a * single node and adjusts the position values * of that node to move it toward the center of * the visualization. * * Positioning is adjusted by the force layout's * alpha parameter which gets smaller and smaller as * the force layout runs. This makes the impact of * this moving get reduced as each node gets closer to * its destination, and so allows other forces like the * node's charge force to also impact final location. */ function moveToCenter(alpha) { return function (d) { d.x = d.x + (center.x - d.x) * damper * alpha; d.y = d.y + (center.y - d.y) * damper * alpha; }; } /* * Sets visualization in \"split by year mode\". * The year labels are shown and the force layout * tick function is set to move nodes to the * yearCenter of their data's year. */ function splitBubbles() { showYears(); force.on('tick', function (e) { bubbles.each(moveToYears(e.alpha)) .attr('cx', function (d) { return d.x; }) .attr('cy', function (d) { return d.y; }); }); force.start(); } /* * Helper function for \"split by year mode\". * Returns a function that takes the data for a * single node and adjusts the position values * of that node to move it the year center for that * node. * * Positioning is adjusted by the force layout's * alpha parameter which gets smaller and smaller as * the force layout runs. This makes the impact of * this moving get reduced as each node gets closer to * its destination, and so allows other forces like the * node's charge force to also impact final location. */ function moveToYears(alpha) { return function (d) { if (yearCenters[d.year]){ var target = yearCenters[d.year]; } else { var target = { x: width / 2, y: height / 2 }; } d.x = d.x + (target.x - d.x) * damper * alpha * 1.1; d.y = d.y + (target.y - d.y) * damper * alpha * 1.1; }; } /* * Hides Year title displays. */ function hideYears() { svg.selectAll('.year').remove(); } /* * Shows Year title displays. */ function showYears() { // Another way to do this would be to create // the year texts once and then just hide them. var yearsData = d3.keys(yearsTitleX); var years = svg.selectAll('.year') .data(yearsData); years.enter().append('text') .attr('class', 'year') .attr('x', function (d) { return yearsTitleX[d]; }) .attr('y', function (d) { return yearsTitleY[d]; }) .attr('text-anchor', 'middle') .text(function (d) { return d; }); } /* * Function called on mouseover to display the * details of a bubble in the tooltip. */ function showDetail(d) { // change outline to indicate hover state. d3.select(this).attr('stroke', 'black'); var content = 'Provider Location: ' + d.name + \", \" + d.year + '' + 'Amount Charged: $' + addCommas(parseFloat(Math.round(d.value * 100) / 100).toFixed(2)) + '' + 'Services Performed: ' + d.org + ''; tooltip.showTooltip(content, d3.event); } /* * Hides tooltip */ function hideDetail(d) { // reset outline d3.select(this) .attr('stroke', d3.rgb(fillColor(d.group)).darker()); tooltip.hideTooltip(); } /* * Externally accessible function (this is attached to the * returned chart function). Allows the visualization to toggle * between \"single group\" and \"split by year\" modes. * * displayName is expected to be a string and either 'year' or 'all'. */ chart.toggleDisplay = function (displayName) { if (displayName === 'year') { splitBubbles(); } else { groupBubbles(); } }; // return the chart function from closure. return chart; } /* * Below is the initialization code as well as some helper functions * to create a new bubble chart instance, load the data, and display it. */ var myBubbleChart = bubbleChart(); /* * Function called once data is loaded from CSV. * Calls bubble chart function to display inside #vis div. */ function display(error, data) { if (error) { console.log(error); } myBubbleChart('#vis', data); } /* * Sets up the layout buttons to allow for toggling between view modes. */ function setupButtons() { d3.select('#toolbar') .selectAll('.button') .on('click', function () { // Remove active class from all buttons d3.selectAll('.button').classed('active', false); // Find the button just clicked var button = d3.select(this); // Set it as the active button button.classed('active', true); // Get the id of the button var buttonId = button.attr('id'); // Toggle the bubble chart based on // the currently clicked button. myBubbleChart.toggleDisplay(buttonId); }); } /* * Helper function to convert a number into a string * and add commas to it to improve presentation. */ function addCommas(nStr) { nStr += ''; var x = nStr.split('.'); var x1 = x[0]; var x2 = x.length > 1 ? '.' + x[1] : ''; var rgx = /(\\d+)(\\d{3})/; while (rgx.test(x1)) { x1 = x1.replace(rgx, '$1' + ',' + '$2'); } return x1 + x2; } // Load the data. d3.csv('http://blog.submithealth.com/assets/Why-Are-Some-Healthcare-Providers-Charging-So-Much-More-Than-Others/data/APC_Excision_2014.csv', display); // setup the buttons. setupButtons();"},{"title":"","date":"2016-12-15T07:00:56.901Z","updated":"2016-12-15T07:00:56.901Z","comments":true,"path":"assets/Why-Are-Some-Healthcare-Providers-Charging-So-Much-More-Than-Others/css/bubble_chart.css","permalink":"http://blog.submithealth.com/assets/Why-Are-Some-Healthcare-Providers-Charging-So-Much-More-Than-Others/css/bubble_chart.css","excerpt":"","text":".button a, a:visited, a:active { color: #444; } .button { min-width: 130px; padding: 6px 10px; border-radius: 5px; cursor: pointer; text-align: center; font-size: 13px; border: 1px solid #999; text-decoration: none !important; } .button.active { background: #aaa; color: #fff; } #vis { width: 940px; height: 600px; clear: both; margin-bottom: 10px; } #toolbar { margin-top: 10px; } .year { font-size: 21px; fill: #aaa; cursor: default; } .tooltip { position: absolute; top: 100px; left: 100px; -moz-border-radius:5px; border-radius: 5px; border: 2px solid #000; background: #fff; opacity: .9; color: black; padding: 10px; width: 300px; font-size: 12px; z-index: 10; } .tooltip .title { font-size: 13px; } .tooltip .name { font-weight:bold; } .footer { text-align: center; }"},{"title":"","date":"2016-12-15T07:00:56.814Z","updated":"2016-12-15T07:00:56.814Z","comments":true,"path":"assets/Why-Are-Some-Healthcare-Providers-Charging-So-Much-More-Than-Others/css/reset.css","permalink":"http://blog.submithealth.com/assets/Why-Are-Some-Healthcare-Providers-Charging-So-Much-More-Than-Others/css/reset.css","excerpt":"","text":"/* HTML5 ✰ Boilerplate * ==|== normalize ========================================================== */ article, aside, details, figcaption, figure, footer, header, hgroup, nav, section { display: block; } audio, canvas, video { display: inline-block; *display: inline; *zoom: 1; } audio:not([controls]) { display: none; } [hidden] { display: none; } html { font-size: 100%; overflow-y: scroll; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; } body { margin: 0; font-size: 13px; line-height: 1.231; } body, button, input, select, textarea { font-family: sans-serif; color: #222; } ::-moz-selection { background: #fe57a1; color: #fff; text-shadow: none; } ::selection { background: #fe57a1; color: #fff; text-shadow: none; } a { color: #00e; } a:visited { color: #551a8b; } a:hover { color: #06e; } a:focus { outline: thin dotted; } a:hover, a:active { outline: 0; } abbr[title] { border-bottom: 1px dotted; } b, strong { font-weight: bold; } blockquote { margin: 1em 40px; } dfn { font-style: italic; } hr { display: block; height: 1px; border: 0; border-top: 1px solid #ccc; margin: 1em 0; padding: 0; } ins { background: #ff9; color: #000; text-decoration: none; } mark { background: #ff0; color: #000; font-style: italic; font-weight: bold; } pre, code, kbd, samp { font-family: monospace, monospace; _font-family: 'courier new', monospace; font-size: 1em; } pre { white-space: pre; white-space: pre-wrap; word-wrap: break-word; } q { quotes: none; } q:before, q:after { content: \"\"; content: none; } small { font-size: 85%; } sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; } sup { top: -0.5em; } sub { bottom: -0.25em; } ul, ol { margin: 1em 0; padding: 0 0 0 40px; } dd { margin: 0 0 0 40px; } nav ul, nav ol { list-style: none; list-style-image: none; margin: 0; padding: 0; } img { border: 0; -ms-interpolation-mode: bicubic; vertical-align: middle; } svg:not(:root) { overflow: hidden; } figure { margin: 0; } form { margin: 0; } fieldset { border: 0; margin: 0; padding: 0; } label { cursor: pointer; } legend { border: 0; *margin-left: -7px; padding: 0; } button, input, select, textarea { font-size: 100%; margin: 0; vertical-align: baseline; *vertical-align: middle; } button, input { line-height: normal; *overflow: visible; } table button, table input { *overflow: auto; } button, input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"] { cursor: pointer; -webkit-appearance: button; } input[type=\"checkbox\"], input[type=\"radio\"] { box-sizing: border-box; } input[type=\"search\"] { -webkit-appearance: textfield; -moz-box-sizing: content-box; -webkit-box-sizing: content-box; box-sizing: content-box; } input[type=\"search\"]::-webkit-search-decoration { -webkit-appearance: none; } button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; } textarea { overflow: auto; vertical-align: top; resize: vertical; } input:valid, textarea:valid { } input:invalid, textarea:invalid { background-color: #f0dddd; } table { border-collapse: collapse; border-spacing: 0; } td { vertical-align: top; } /* ==|== primary styles ===================================================== Author: ========================================================================== */ /* ==|== non-semantic helper classes ======================================== */ .ir { display: block; border: 0; text-indent: -999em; overflow: hidden; background-color: transparent; background-repeat: no-repeat; text-align: left; direction: ltr; } .ir br { display: none; } .hidden { display: none !important; visibility: hidden; } .visuallyhidden { border: 0; clip: rect(0 0 0 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } .visuallyhidden.focusable:active, .visuallyhidden.focusable:focus { clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto; } .invisible { visibility: hidden; } .clearfix:before, .clearfix:after { content: \"\"; display: table; } .clearfix:after { clear: both; } .clearfix { zoom: 1; } /* ==|== media queries ====================================================== */ @media only screen and (min-width: 480px) { } @media only screen and (min-width: 768px) { } /* ==|== print styles ======================================================= */ @media print { * { background: transparent !important; color: black !important; text-shadow: none !important; filter:none !important; -ms-filter: none !important; } a, a:visited { text-decoration: underline; } a[href]:after { content: \" (\" attr(href) \")\"; } abbr[title]:after { content: \" (\" attr(title) \")\"; } .ir a:after, a[href^=\"javascript:\"]:after, a[href^=\"#\"]:after { content: \"\"; } pre, blockquote { border: 1px solid #999; page-break-inside: avoid; } thead { display: table-header-group; } tr, img { page-break-inside: avoid; } img { max-width: 100% !important; } @page { margin: 0.5cm; } p, h2, h3 { orphans: 3; widows: 3; } h2, h3 { page-break-after: avoid; } }"}],"posts":[{"title":"Three Simple Tips to Help Your Practice in a Digital Age","slug":"Three-Simple-Tips-to-Help-Your-Practice-in-a-Digital-Age","date":"2016-12-16T02:46:27.000Z","updated":"2016-12-16T03:55:17.554Z","comments":true,"path":"2016/12/15/Three-Simple-Tips-to-Help-Your-Practice-in-a-Digital-Age/","link":"","permalink":"http://blog.submithealth.com/2016/12/15/Three-Simple-Tips-to-Help-Your-Practice-in-a-Digital-Age/","excerpt":"","text":"#Have a Kickass Website ##Get a websiteIf you do not have a website, you are not being seen. A recent survey published on mobilehealthnews.com reported that Fifty-four percent of young millennials (aged 18 to 24) say they search online for health information and rely on online physician ratings before seeing a doctor.Let’s face it, we are living in a unique era where healthcare will intersect with technology like never before. If you’re still holding out on a website, you will be forgotten. ##Is your site working for you and your patients?There are some key features that you must do well to highlight. Upon visiting your website, a patient should instantly be able to find how to schedule an appointment, where you are located, and how to call you. You should also consider helpful services like online forms and bill pay. ##Does your website look professional?Your website is the storefront that reflects your practice, hence it should look clean and professional. Less is more! You may showcase your core services and staff, but take care not to clutter your site, making it hard for users to find important info, like how to contact you.Ensure your website looks like it was built in this decade. The internet has drastically changed since it was first conceived. Your website should be nicely viewable and useable on cell phones and tablets. It should also have high quality images that reflect your practice. #Manage and Sustain Your Web Presence ##Keep your listings up to dateNot so long ago, I made an appointment with an allergist. I used Google Maps to find and route me to the practice, only to find that the practice had moved a few months ago and I was in the wrong location. Hence, its becoming more and more important to stay on top of your web presence and maintain your brand as a healthcare provider. Keep your business listing up to date with Google, Yelp, and other websites to ensure your online identity stays maintained. ##Keep your social medias up to dateSocial medias such as Facebook, Twitter, and Instagram are another great way to promote your business, and share useful information about your practice. Not sure where to start? Try doing just one of these well. A Facebook page is a great starting point. Feel free to leverage your more trusted and extroverted staff to help create content, but just remember to be careful not to violate any HIPAA rules. #Have a Friendly StaffLast but not least, this is one of the most important things you can have to help ensure success in your practice. After the incident with my allergist that I spoke about above, I remember calling the office in confusion, trying to figure out where to find them. I was already very late, and they told me to come in anyway, but the staff was somewhat rude and annoyed by the whole ordeal. The doctor was kind and very effective in treating me, but the whole experience left me in a state where I did not want to go back. Many practices today still remain frustrated with the growth of social media, and their resistance to such changes is rational. How could patients so quickly judge the complexities of medicine without an understanding of the deep medical sciences that doctors have devoted years of their lives to. But, when you look at patient reviews, often the negative ones have little to do with the effectivity of a treatment, and a lot more to do with their person to person interactions. Your staff is part of your brand, and this is no different than how it was 50 years ago. Before social medias, word of mouth within a community went a long way in establishing a doctor’s reputation, for better or worse. The main difference today is that word of mouth travels much faster than it ever did before. Let’s face it, social medias are here to stay, and how you appear on them will go a long way to help or hurt your business. It’s bedside mannor 2.0 and you need it to survive. The good news is that all you have to do is be nice! Thank you for reading and please feel free to comment on your tips or thoughts below. Andrew AkagawaWriter, Coder, Healthcare Nerd Image courtesy of StockSnap.io","categories":[],"tags":[]}]}